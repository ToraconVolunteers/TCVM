/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Sys.UI;

import Sys.Core.File.ExcelFilePrep;
import Sys.Core.File.ExcelReader;
import Sys.Core.Util.Logger;
import Sys.Core.Util.ScheduledTask;
import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.Timer;
import javax.swing.DefaultListModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.write.WriteException;

/**
 *
 * @author TheHoudhini
 * @date Oct 09, 2013
 */
public class MainUI extends javax.swing.JFrame {

    private String firstName, lastName, fileAddress;
    private static String selection, sortBy = "Name";
    private static int row;
    //private static int firstNameCol = Sys.Core.File.ExcelFilePrep.getFirstNameCol();
    private static int nameCol = Sys.Core.File.ExcelFilePrep.getNameCol();
    private static boolean noFileSelected, isSystemStart = true;
    
    public MainUI() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
        
        if (isSystemStart) {
            // Apend system start to log
            Sys.Core.Util.Logger.appendLog(Sys.Core.Util.DateAndTime.getDateAndTime()+" - System Start");
            Sys.Core.Util.DateAndTime.setStartTime();
        }
        // Retrieve the file address
        fileAddress = getFileAddress();
        if (noFileSelected) {
            // do nothing
        } else {
            populateVolunteerList();
            // append to log (includes total volunteer count
            Sys.Core.Util.Logger.appendLog(Sys.Core.Util.DateAndTime.getDateAndTime()+" - Volunteer List Loaded (Total: "+Integer.toString(Logger.getTotalVolunteerCount())+")");
            LogUI silentLogger = new LogUI(false);
            clock();
            setConDayLabel();
            setSelection(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        sortButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        volunteerList = new javax.swing.JList();
        sortSelectionComboBox = new javax.swing.JComboBox();
        jPanel2 = new javax.swing.JPanel();
        moreButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        firstNameTextField = new javax.swing.JTextField();
        lastNameTextField = new javax.swing.JTextField();
        hoursCompletedTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        statusTextField = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        shiftDetailList = new javax.swing.JList();
        checkInButton = new javax.swing.JButton();
        checkOutButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        shiftDescriptionTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        shiftLocationTextField = new javax.swing.JTextField();
        confirmationLabel = new javax.swing.JLabel();
        aboutButton = new javax.swing.JButton();
        logButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        dateTimeLabel = new javax.swing.JLabel();
        fileButton = new javax.swing.JButton();
        conDay = new javax.swing.JLabel();
        feedbackButton = new javax.swing.JButton();
        refreshButton = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Tora-Con Volunteer Management System by Tora-Con Volunteers Department");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Volunteer List", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 102, 0)));
        jPanel1.setForeground(new java.awt.Color(255, 102, 0));

        sortButton.setBackground(new java.awt.Color(255, 255, 255));
        sortButton.setForeground(new java.awt.Color(102, 102, 102));
        sortButton.setText("Sort By");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(102, 102, 102));

        volunteerList.setForeground(new java.awt.Color(102, 102, 102));
        volunteerList.setToolTipText("List Of Gofers");
        volunteerList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                volunteerListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(volunteerList);

        sortSelectionComboBox.setForeground(new java.awt.Color(102, 102, 102));
        sortSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Name", "Status", "Progress" }));
        sortSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortSelectionComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sortSelectionComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortButton)
                    .addComponent(sortSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Volunteer Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 102, 0)));
        jPanel2.setForeground(new java.awt.Color(255, 102, 0));

        moreButton.setBackground(new java.awt.Color(255, 255, 255));
        moreButton.setForeground(new java.awt.Color(102, 102, 102));
        moreButton.setText("More");
        moreButton.setToolTipText("Stalker Mode");
        moreButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        moreButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreButtonActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 102, 0));
        jLabel1.setText("First Name:");

        jLabel2.setForeground(new java.awt.Color(255, 102, 0));
        jLabel2.setText("Completed (Hrs):");

        jLabel3.setForeground(new java.awt.Color(255, 102, 0));
        jLabel3.setText("Last Name:");

        firstNameTextField.setEditable(false);
        firstNameTextField.setBackground(new java.awt.Color(255, 255, 255));
        firstNameTextField.setForeground(new java.awt.Color(102, 102, 102));
        firstNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        lastNameTextField.setEditable(false);
        lastNameTextField.setBackground(new java.awt.Color(255, 255, 255));
        lastNameTextField.setForeground(new java.awt.Color(102, 102, 102));
        lastNameTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        hoursCompletedTextField.setEditable(false);
        hoursCompletedTextField.setBackground(new java.awt.Color(255, 255, 255));
        hoursCompletedTextField.setForeground(new java.awt.Color(102, 102, 102));
        hoursCompletedTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel5.setForeground(new java.awt.Color(255, 102, 0));
        jLabel5.setText("Status:");

        statusTextField.setEditable(false);
        statusTextField.setBackground(new java.awt.Color(255, 255, 255));
        statusTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hoursCompletedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(moreButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(firstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(13, 13, 13)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hoursCompletedTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel5)
                    .addComponent(statusTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(moreButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Shift Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 102, 0)));
        jPanel3.setForeground(new java.awt.Color(255, 102, 0));

        shiftDetailList.setForeground(new java.awt.Color(102, 102, 102));
        shiftDetailList.setToolTipText("Whats Being Done");
        jScrollPane2.setViewportView(shiftDetailList);

        checkInButton.setBackground(new java.awt.Color(255, 255, 255));
        checkInButton.setForeground(new java.awt.Color(51, 51, 255));
        checkInButton.setText("Check-In");
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });

        checkOutButton.setBackground(new java.awt.Color(255, 255, 255));
        checkOutButton.setForeground(new java.awt.Color(51, 51, 255));
        checkOutButton.setText("Check-Out");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "New Shift Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(255, 102, 0)));

        jLabel6.setForeground(new java.awt.Color(255, 102, 0));
        jLabel6.setText("Shift Description:");

        shiftDescriptionTextField.setForeground(new java.awt.Color(102, 102, 102));

        jLabel7.setForeground(new java.awt.Color(255, 102, 0));
        jLabel7.setText("Shift Location:");

        shiftLocationTextField.setForeground(new java.awt.Color(102, 102, 102));

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shiftDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(shiftLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(shiftDescriptionTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(shiftLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        confirmationLabel.setBackground(new java.awt.Color(255, 255, 255));
        confirmationLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        confirmationLabel.setForeground(new java.awt.Color(102, 102, 102));
        confirmationLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkInButton)
                .addGap(18, 18, 18)
                .addComponent(checkOutButton)
                .addGap(11, 11, 11))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {checkInButton, checkOutButton});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkInButton)
                    .addComponent(checkOutButton)
                    .addComponent(confirmationLabel))
                .addContainerGap())
        );

        aboutButton.setBackground(new java.awt.Color(255, 255, 255));
        aboutButton.setForeground(new java.awt.Color(102, 102, 102));
        aboutButton.setText("About");
        aboutButton.setToolTipText("Nothing & Everything");
        aboutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutButtonActionPerformed(evt);
            }
        });

        logButton.setBackground(new java.awt.Color(255, 255, 255));
        logButton.setForeground(new java.awt.Color(102, 102, 102));
        logButton.setText("Log");
        logButton.setToolTipText("Cool Stats");
        logButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logButtonActionPerformed(evt);
            }
        });

        exitButton.setBackground(new java.awt.Color(255, 255, 255));
        exitButton.setForeground(new java.awt.Color(255, 0, 0));
        exitButton.setText("Exit");
        exitButton.setToolTipText("The End Of All Things");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 28)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 102, 0));
        jLabel4.setText("Tora-Con Volunteer Management");

        dateTimeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateTimeLabel.setForeground(new java.awt.Color(255, 102, 0));
        dateTimeLabel.setText("Date/Time");

        fileButton.setBackground(new java.awt.Color(255, 255, 255));
        fileButton.setForeground(new java.awt.Color(102, 102, 102));
        fileButton.setText("File");
        fileButton.setToolTipText("Where The Hell Is The Excel File");
        fileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileButtonActionPerformed(evt);
            }
        });

        conDay.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        conDay.setForeground(new java.awt.Color(255, 102, 0));
        conDay.setText("Day");

        feedbackButton.setBackground(new java.awt.Color(255, 255, 255));
        feedbackButton.setForeground(new java.awt.Color(102, 102, 102));
        feedbackButton.setText("Feedback");
        feedbackButton.setToolTipText("Tell Us How Awesome We Are");
        feedbackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                feedbackButtonActionPerformed(evt);
            }
        });

        refreshButton.setBackground(new java.awt.Color(255, 255, 255));
        refreshButton.setForeground(new java.awt.Color(102, 102, 102));
        refreshButton.setText("Refresh");
        refreshButton.setToolTipText("");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateTimeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conDay, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(59, 59, 59))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel5Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(aboutButton)
                        .addGap(18, 18, 18)
                        .addComponent(feedbackButton))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(refreshButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(fileButton)
                        .addGap(18, 18, 18)
                        .addComponent(logButton)
                        .addGap(18, 18, 18)
                        .addComponent(exitButton)
                        .addGap(27, 27, 27))))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aboutButton, exitButton, feedbackButton, fileButton, logButton, refreshButton});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(conDay, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dateTimeLabel)
                        .addGap(18, 18, 18))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fileButton)
                    .addComponent(logButton)
                    .addComponent(exitButton)
                    .addComponent(aboutButton)
                    .addComponent(feedbackButton)
                    .addComponent(refreshButton))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        ExitConfirm exit = new ExitConfirm();
    }//GEN-LAST:event_exitButtonActionPerformed

    private void volunteerListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_volunteerListMouseClicked
        // assign the selected element of the list to string
        setSelection(true);
        // search and get row nunmber
        row = Sys.Core.File.ExcelReader.getRow(selection, nameCol);
        setNameLabel(selection);
        setStatusLabel(row);
        setHoursCompletedLabel(row);
        populateDetailsList(row);
        // disable text field if current volunteer is active ie. already checked-in
        if (Sys.Core.File.ExcelReader.getCellContent(ExcelFilePrep.getStatusCol(), row).equals("active")) {
            shiftDescriptionTextField.setEditable(false);
            shiftLocationTextField.setEditable(false);
        } else {
            shiftDescriptionTextField.setEditable(true);
            shiftLocationTextField.setEditable(true);
        }
        // clear shift description text field
        shiftDescriptionTextField.setText(null);
        // clear shift location text field
        shiftLocationTextField.setText(null);
        // clear confirmation label
        confirmationLabel.setText(null);
    }//GEN-LAST:event_volunteerListMouseClicked

    private void aboutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutButtonActionPerformed
        AboutUI aboutUI = new AboutUI();
    }//GEN-LAST:event_aboutButtonActionPerformed

    private void moreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreButtonActionPerformed
        AdminLoginUI adminUI = new AdminLoginUI("more");
    }//GEN-LAST:event_moreButtonActionPerformed

    private void fileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileButtonActionPerformed
        SetExcelFileUI setExcelFile = new SetExcelFileUI();
    }//GEN-LAST:event_fileButtonActionPerformed

    private void logButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logButtonActionPerformed
        LogUI logUI = new LogUI(true);
    }//GEN-LAST:event_logButtonActionPerformed

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        confirmationLabel.setText("Please wait...");
        // check to see if a volunteer has been selected and if a description is given for the current shift
        if (selection.isEmpty()) {
            PopupMessageUI pm = new PopupMessageUI("Unable to check-in since no volunteer has been selected.\nPlease select your name from the volunteer list to proceed.","","Error: No volunteer selected");
            confirmationLabel.setText("Check-In Failed!");
        } else { 
            if (Sys.Core.File.ExcelReader.getCellContent(ExcelFilePrep.getStatusCol(), row).compareTo("active") == 0) { 
                PopupMessageUI pm = new PopupMessageUI("Unable to check-in since you are already in a shift.\nPlease first check-out from your current shift to proceed.","","Error: Already in a shift");
                confirmationLabel.setText("Check-In Failed!");
            } else if (shiftDescriptionTextField.getText().isEmpty()) {
                PopupMessageUI pm = new PopupMessageUI("Unable to check-in since no description has been entered.\nPlease enter a description for the shift you are about to take to proceed.","","Error: No shift description");
                confirmationLabel.setText("Check-In Failed!");
            } else {
                // get the description and location and current timestamp and con day
                String description = shiftDescriptionTextField.getText();
                String location = shiftLocationTextField.getText();
                if (location.isEmpty()) {
                    location = "Unknown";
                }
                String time = Sys.Core.Util.DateAndTime.getTime();
                String day = Sys.Core.Util.DateAndTime.getConDay();
                // ensure that the description is not too short
                if (description.length() < 5) {
                    PopupMessageUI pm = new PopupMessageUI("Unable to check-in since the description is too short.\nPlease enter a longer description for the shift you are about to take to proceed.","","Error: Inadequete shift description");
                    confirmationLabel.setText("Check-In Failed!");
                } else {
                    int col = Sys.Core.File.ExcelReader.getSpecificCol(row, "next_empty");
                    try {
                        // write the description and timestamp to the excel file
                        Sys.Core.File.ExcelWriter.writeText("in | "+day+" | "+time+" | "+location+" | "+description, col, row);
                        // toggle status field to active in excel file
                        Sys.Core.File.ExcelWriter.statusToggle(1, row);
                    } catch (IOException | WriteException ex) {
                        PopupMessageUI pm = new PopupMessageUI("Unable to check-in since an internal error has occured.\nThis may be due to the excel file being open.\nPlease close the excel file to proceed.","The following error was caught: " + ex,"Error: Fatal error");
                    }
                    // reset status text field
                    setStatusLabel(row);
                    // update shift detail list
                    populateDetailsList(row);
                    // increment check-in counter (for statistic)
                    Sys.Core.Util.Logger.incrementCheckInCount();
                    // update confirmation label
                    confirmationLabel.setText("Check-In Successful!");
                }

            }
        }
    }//GEN-LAST:event_checkInButtonActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        confirmationLabel.setText("Please wait...");
        // check to see if a volunteer has been selected and if a description is given for the current shift
        if (selection.isEmpty()) {
            PopupMessageUI pm = new PopupMessageUI("Unable to check-out since no volunteer has been selected.\nPlease select your name from the volunteer list to proceed.","","Error: No volunteer selected");
            confirmationLabel.setText("Check-Out Failed!");
        } else { 
            if (Sys.Core.File.ExcelReader.getCellContent(ExcelFilePrep.getStatusCol(), row).compareTo("inactive") == 0) {
                PopupMessageUI pm = new PopupMessageUI("Unable to check-out since you are not in a shift.\nPlease first check-in to proceed.","","Error: Not in a shift");
                confirmationLabel.setText("Check-Out Failed!");
            } else {
                // get the current time stamp
                String time = Sys.Core.Util.DateAndTime.getTime();
                // get current day
                String day = Sys.Core.Util.DateAndTime.getConDay();
                // get the column where shift start details is stored
                int colLast = Sys.Core.File.ExcelReader.getSpecificCol(row, "last");
                // get location and description from start of shift
                String locationAndDescription = Sys.Core.File.ExcelReader.getShiftStartDetail(colLast, row, "loc_des");
                // get shift start and end timestamps
                String shiftStart = Sys.Core.File.ExcelReader.getShiftStartDetail(colLast, row, "timestamp");
                String shiftEnd = Sys.Core.Util.DateAndTime.getTime();
                // calculate shift completion time in minutes
                float increment = Sys.Core.Util.DateAndTime.shiftCompletionTimeDifference(shiftStart, shiftEnd);
                float timeCompleted = increment * 60;
                timeCompleted = (int) Math.round(timeCompleted);
                // get the column where shift end details is to be stored
                int colNextEmpty = Sys.Core.File.ExcelReader.getSpecificCol(row, "next_empty");
                try {
                    // write the shift end timestamp to the excel file
                    Sys.Core.File.ExcelWriter.writeText("out | "+day+" | "+time+" | "+locationAndDescription+" (shift end "+timeCompleted+" mins)", colNextEmpty, row);
                    // toggle status field to inactive in excel file
                    Sys.Core.File.ExcelWriter.statusToggle(0, row);
                    // increment and write total completed hours to excel file
                    Sys.Core.File.ExcelWriter.incrementHoursCompleted(increment, row);
                    // checks if the volunteer has done more than the minimum require hours for reimbursement and then updates the record
                    Sys.Core.File.ExcelWriter.reimbursement(row);
                } catch (IOException | WriteException ex) {
                    PopupMessageUI pm = new PopupMessageUI("Unable to check-in since an internal error has occured.\nThis may be due to the excel file being open.\nPlease close the excel file to proceed.","The following error was caught: " + ex,"Error: Fatal error");
                }
                // reset status text field
                setStatusLabel(row);
                // update hours completed text field
                setHoursCompletedLabel(row);
                // update shift detail list
                populateDetailsList(row);
                // increment check-out counter (for statistic)
                Sys.Core.Util.Logger.incrementCheckOutCount();
                confirmationLabel.setText("Check-Out Successful!");
                }
            }
    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void feedbackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_feedbackButtonActionPerformed
        if (selection.isEmpty()) {
            PopupMessageUI pm = new PopupMessageUI("Feedback is volunteer based.\nPlease select your name from the volunteer list to proceed.","","Error: No volunteer selected");
        } else {
            FeedbackUI feedback = new FeedbackUI();
            PopupMessageUI pm = new PopupMessageUI("Feedback is to be provided per volunteer.\nPlease ensure that your name is selected before providing feedback","","Verification");
        }
    }//GEN-LAST:event_feedbackButtonActionPerformed

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        isSystemStart = false;
        dispose();
        // log system refresh
        Sys.Core.Util.Logger.appendLog(Sys.Core.Util.DateAndTime.getDateAndTime()+" - System Refreshed");
        MainUI mainUI = new MainUI();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void sortSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortSelectionComboBoxActionPerformed
        sortBy = (String) sortSelectionComboBox.getSelectedItem();
    }//GEN-LAST:event_sortSelectionComboBoxActionPerformed

    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        PopupMessageUI pm = new PopupMessageUI("Sort function not yet implemented at this time","Please try again next year!","Error");
        /*
        if (sortBy.isEmpty()) {
            // do nothing
        } else {
            switch (sortBy) {
                case "Name":
                    String[] leading = Sys.Core.File.ExcelReader.getColContent(firstNameCol);
                    for (int i = 0; i < leading.length; i++) {
                        //System.out.println(leading[i]);
                    }
            }
        }
        */
    }//GEN-LAST:event_sortButtonActionPerformed

    private String getFileAddress() {
        String address = Sys.Core.File.ExcelFilePrep.getFileAddress();
        if (address.isEmpty()) {
            PopupMessageUI pm = new PopupMessageUI("No excel file is selected.\nPlease press the 'File' button and chooose a file to proceed.","","Error: No file selected");
            noFileSelected = true;
            Sys.Core.Util.Logger.appendLog(Sys.Core.Util.DateAndTime.getDateAndTime()+" - Error: No File Selected");
        } else {
            noFileSelected = false;
        }
        return address;
    }
    
    private void setNameLabel(String selection) {
        // gets the name string array
        String[] name = getNameLabel(selection);
        // assigns the first word as the firstname
        firstName = name[0];
        // assigns the last word as the lastname
        lastName = name[name.length-1];
        // outut the names to their respective GUI text fields
        firstNameTextField.setText(firstName);
        lastNameTextField.setText(lastName);
    }
    
    public static String[] getNameLabel(String selection) {
        // split the name field string into individual words
        String[] name = selection.split(" ");
        return name;
    }
    
    /*
    private void setNameLabel(String selection) {
        // gets the name string array
        String[] name = getNameLabel(selection);
        // assigns the first word as the firstname
        firstName = name[0];
        // assigns the last word as the lastname
        lastName = name[name.length-1];
        // outut the names to their respective GUI text fields
        firstNameTextField.setText(firstName);
        lastNameTextField.setText(lastName);
    }
    
    public static String[] getNameLabel(String selection) {
        // split the name field string into individual words
        String[] name = selection.split(" ");
        return name;
    }
    */
    
    private void setSelection(boolean  selected) {
        if (selected) {
            // assigns the selected volunteer to selection string
            //String selectedValue = String.valueOf(volunteerList.getSelectedValue());
            //String[] split = selectedValue.split(" ");
            //selection = split[0];
            selection = String.valueOf(volunteerList.getSelectedValue());
        } else {
            // defaults selection to an empty string
            selection = "";
        }
    }
    
    public static String getSelection() {
        return selection;
    }
    
    public static int getRow() {
        return row;
    }
    
    private void setStatusLabel(int row) {
        // gets the status field from the Excel file (col 14)
        String status = Sys.Core.File.ExcelReader.getCellContent(ExcelFilePrep.getStatusCol(), row);
        // assigns color and then rint it to text field
        switch (status) {
            case "inactive":
                // if the volunteer is currently inactive
                statusTextField.setText(status);
                statusTextField.setForeground(Color.blue);
                break;
            case "active":
                // if the volunteer is currently active
                statusTextField.setText(status);
                statusTextField.setForeground(Color.red);
                break;
        }
    }
    
    private void setHoursCompletedLabel(int row) {
        // gets the hours completed field from the Excel file (col 12)
        String hoursCompleted = Sys.Core.File.ExcelReader.getCellContent(ExcelFilePrep.getCompletedCol(), row);
        hoursCompletedTextField.setText(hoursCompleted);
    }
    
    public static void setDateTimeLabel(String date, String time) {
        dateTimeLabel.setText(date + "   " + time);
    }
    
    public static void setDateTimeLabel(String dateAndTime) {
        dateTimeLabel.setText(dateAndTime);
    }
    
    private void setConDayLabel() {
        conDay.setText(Sys.Core.Util.DateAndTime.getConDay());
    }
        
    public static void clock() {
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new ScheduledTask(), 0, 1000);
    }
    
    /*
    private void populateVolunteerList() {
        File inputWorkbook = new File(fileAddress);
        DefaultListModel listModel = new DefaultListModel();
        Workbook workBook;
        int firstNameCol = ExcelFilePrep.getFirstNameCol();
        int lastNameCol = ExcelFilePrep.getLastNameCol();
        String name;
            try {
                workBook = Workbook.getWorkbook(inputWorkbook);
                Sheet sheet = workBook.getSheet(0);
                // iteratively read cell contents starting from row 1 (not row 0 i.e. first row) to last (col 1)
                        for (int i = 1; i < sheet.getRows(); i++) {
                            Cell firstNameCell = sheet.getCell(firstNameCol, i);
                            Cell lastNameCell = sheet.getCell(lastNameCol, i);
                            name = firstNameCell.getContents() + " " + lastNameCell.getContents();
                            // Add cell content to list
                            listModel.addElement(name);
                        }
         // Generates the list               
         volunteerList.setModel(listModel);
         Logger.setTotalVolunteerCount(sheet.getRows());
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        
    }
    */
    
    private void populateVolunteerList() {
        File inputWorkbook = new File(fileAddress);
        DefaultListModel listModel = new DefaultListModel();
        Workbook workBook;
            try {
                workBook = Workbook.getWorkbook(inputWorkbook);
                Sheet sheet = workBook.getSheet(0);
                // iteratively read cell contents starting from row 1 to last (col 0)
                        for (int i = 1; i < sheet.getRows(); i++) {
                            Cell cell = sheet.getCell(0, i);
                            // Add cell content to list
                            listModel.addElement(cell.getContents());
                        }
         // Generates the list               
         volunteerList.setModel(listModel);
         Logger.setTotalVolunteerCount(sheet.getRows());
            } catch(Exception ex) {
                ex.printStackTrace();
            }
        
    }
    
    private void populateDetailsList(int row) {
        File inputWorkbook = new File(fileAddress);
        DefaultListModel listModel = new DefaultListModel();
        Workbook workBook;
            try {
                workBook = Workbook.getWorkbook(inputWorkbook);
                Sheet sheet = workBook.getSheet(0);
                int lastCol = ExcelFilePrep.getLastUserInfoCol();
                // iteratively read cell contents starting from last auto filled column to last (row no. = row)
                        for (int i = lastCol; i < sheet.getColumns(); i++) {
                            Cell cell = sheet.getCell(i, row);
                            // Add cell content to list
                            listModel.addElement(cell.getContents());
                        }
         // Generates the list               
         shiftDetailList.setModel(listModel);
            } catch (Exception ex) {
                
            }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton aboutButton;
    private javax.swing.JButton checkInButton;
    private javax.swing.JButton checkOutButton;
    private javax.swing.JLabel conDay;
    private javax.swing.JLabel confirmationLabel;
    static javax.swing.JLabel dateTimeLabel;
    private javax.swing.JButton exitButton;
    private javax.swing.JButton feedbackButton;
    private javax.swing.JButton fileButton;
    private javax.swing.JTextField firstNameTextField;
    private javax.swing.JTextField hoursCompletedTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField lastNameTextField;
    private javax.swing.JButton logButton;
    private javax.swing.JButton moreButton;
    private javax.swing.JButton refreshButton;
    private javax.swing.JTextField shiftDescriptionTextField;
    private javax.swing.JList shiftDetailList;
    private javax.swing.JTextField shiftLocationTextField;
    private javax.swing.JButton sortButton;
    private javax.swing.JComboBox sortSelectionComboBox;
    private javax.swing.JTextField statusTextField;
    private javax.swing.JList volunteerList;
    // End of variables declaration//GEN-END:variables
}
